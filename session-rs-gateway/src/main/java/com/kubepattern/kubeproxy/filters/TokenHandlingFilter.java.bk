package com.kubepattern.kubeproxy.filters;


import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpCookie;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.server.reactive.ServerHttpRequest;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.client.ReactiveOAuth2AuthorizedClientService;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Component;
import org.springframework.util.StringUtils;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Slf4j
@Component
public class TokenHandlingFilter implements GlobalFilter, Ordered {

    //@Value("${spring.security.oauth2.client.registration.redirect-path:/login/oauth2/code}") // Base URL 설정
    //private String baseUrl;

    private final ReactiveOAuth2AuthorizedClientService authorizedClientService;

    public TokenHandlingFilter(ReactiveOAuth2AuthorizedClientService authorizedClientService) {
        this.authorizedClientService = authorizedClientService;
    }


    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {

        String path = exchange.getRequest().getURI().getRawPath();
        log.debug("###### TokenHandlingFilter header : {}", exchange.getRequest().getHeaders());
        log.debug("###### TokenHandlingFilter Request Path : {}", path);

        // 1. Header에 Authorization Bearer 토큰이 있는지를 확인하여 있다면 리턴한다.
        String authorizationHeader = exchange.getRequest().getHeaders().getFirst(HttpHeaders.AUTHORIZATION);
        if (StringUtils.hasText(authorizationHeader) && authorizationHeader.startsWith("Bearer ")) {
            String token = authorizationHeader.substring(7);
            log.debug("###### Authorization Bearer : {}", token);
            return chain.filter(exchange); // 토큰이 있으면 요청을 계속 진행
        }


        //2. 쿼리 파라미터에 access-token이 있는지 확인하여 이것을 Authorization Bearer로 추가한다.
        String accessToken = exchange.getRequest().getQueryParams().getFirst("access-token");
        if (accessToken != null) {
            log.debug("\n###### access token : {} \n", accessToken);

            ServerHttpRequest request = exchange.getRequest().mutate()
                    .header(HttpHeaders.AUTHORIZATION, "Bearer " + accessToken)
                    .build();

            log.debug("\n###### mutated request : {} \n", request);
            return chain.filter(exchange.mutate().request(request).build());
        }

        return chain.filter(exchange); // 토큰이 없는 경우 기존 요청 그대로 진행
    }



    @Override
    public int getOrder() {
        return -20000; // 필터 순서를 높게 설정하여 가장 먼저 실행되도록 합니다.
    }
}

