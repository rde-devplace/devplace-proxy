package com.kubepattern.kubeproxy.filters;


import com.kubepattern.kubeproxy.util.ExchangeHandler;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GatewayFilterChain;
import org.springframework.cloud.gateway.filter.GlobalFilter;
import org.springframework.core.Ordered;
import org.springframework.http.HttpStatus;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.oauth2.core.user.OAuth2User;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Mono;

import java.net.URI;

@Slf4j
@Component
public class SubDomainGlobalFilter implements GlobalFilter, Ordered {

    @Override
    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {

        log.info("?F??????????????????????? SubDomainGlobalFilter filter() host: {} path: {} uri: {}",
                exchange.getRequest().getHeaders().getHost(), exchange.getRequest().getPath(), exchange.getRequest().getURI());
        Mono<SecurityContext> securityContextMono = exchange.getPrincipal()
                .flatMap(principal -> {
                    if (principal instanceof Authentication) {
                        SecurityContextHolder.getContext().setAuthentication((Authentication) principal);
                    }
                    log.info("Mono<SecurityContext> securityContextMono: {}", SecurityContextHolder.getContext().getAuthentication().getPrincipal());
                    return Mono.justOrEmpty(SecurityContextHolder.getContext());
                });


        return securityContextMono
                .filter(securityContext -> securityContext.getAuthentication() != null)
                .map(securityContext -> {
                    return (OAuth2User) securityContext.getAuthentication().getPrincipal();
                })
                .flatMap(oAuth2User -> {
                    String name = oAuth2User.getAttribute("preferred_username");
                    String host = exchange.getRequest().getURI().getHost();

                    // 1. host에서 subdomain을 추출
                    String userName = ExchangeHandler.getFieldFromHost(host, ExchangeHandler.EXTRACT_USER_NAME);
                    String portNumber = ExchangeHandler.getFieldFromHost(host, ExchangeHandler.EXTRACT_PORT_NUMBER);
                    String serviceName = ExchangeHandler.getFieldFromHost(host, ExchangeHandler.EXTRACT_SERVICE_NAME);
                    log.info(" $$$$$$$$$$$$$$$$: host: {} userName: {} portNumber: {} serviceName: {}", host, userName, portNumber, serviceName);
                    // 1. himang10-8443.kube-proxy...의 userName = himang10, portNumber = 8443
                    if (userName.equals(ExchangeHandler.NONE)) {
                        log.info(" $$$$$$$$$$$$$$$$$$ PASS: host: {} userName: {} name: {} portNumber: {}", host, userName, name, portNumber);
                        return chain.filter(exchange);

                    } else if (!userName.equals(name)) {
                        log.info("Forbidden: host: {} userName: {} name: {}", host, userName, name);
                        exchange.getResponse().setStatusCode(HttpStatus.FORBIDDEN);
                        return exchange.getResponse().setComplete();

                    } else {
                        log.info(" $$$$$$$$$$$$$$$$$$ Dynamic Routing host: {} userName: {} name: {}", host, userName, name);
                        String dynamicUri = "http://himang10-rde-service.part-rde:8443";
                        //String dynamicUri = "http://" + serviceName + "-rde-service.part-rde:" + portNumber;
                        URI newUri = URI.create(dynamicUri);

                        // 동적으로 결정된 URI로 요청을 변경
                        ServerWebExchange modifiedExchange = exchange.mutate().request(builder -> builder.uri(newUri)).build();
                        log.info("????????????????????????? dynamic uri={} DynamicUriGatewayFilterFactory modifiedExchange={}", dynamicUri, modifiedExchange.getRequest().getPath());
                        log.info("uri={} path={} host={} ", modifiedExchange.getRequest().getURI(),
                                modifiedExchange.getRequest().getPath(), modifiedExchange.getRequest().getHeaders().getHost());
                        // 변경된 exchange로 필터 체인 계속
                        return chain.filter(modifiedExchange);

                    }
                }).switchIfEmpty(chain.filter(exchange));
    }



    @Override
    public int getOrder() {
        return -9999; // 필터 순서를 높게 설정하여 가장 먼저 실행되도록 합니다.
    }
}

