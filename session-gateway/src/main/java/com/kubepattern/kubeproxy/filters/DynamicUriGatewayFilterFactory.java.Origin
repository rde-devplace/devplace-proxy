package com.kubepattern.kubeproxy.filters;


import com.kubepattern.kubeproxy.util.ExchangeHandler;
import lombok.extern.slf4j.Slf4j;
import org.springframework.cloud.gateway.filter.GatewayFilter;
import org.springframework.cloud.gateway.filter.OrderedGatewayFilter;
import org.springframework.cloud.gateway.filter.factory.AbstractGatewayFilterFactory;
import org.springframework.core.Ordered;
import org.springframework.stereotype.Component;
import org.springframework.web.server.ServerWebExchange;

import java.net.URI;
import java.util.regex.Pattern;

@Slf4j
@Component
public class DynamicUriGatewayFilterFactory extends AbstractGatewayFilterFactory<DynamicUriGatewayFilterFactory.Config> {

    private static final Pattern HOST_PATTERN =
            Pattern.compile("^(.+?)-([0-9]+)\\.kube-proxy\\.amdp-dev\\.skamdp\\.org$");
    private static final Pattern SUBDOMAIN_PATTERN =
            Pattern.compile("^([^-]+)");


    public DynamicUriGatewayFilterFactory() {
        super(Config.class);
    }

    public static class Config {
        // 필터 설정을 위한 클래스. 필요한 설정이 있다면 여기에 추가.
    }

    @Override
    public GatewayFilter apply(Config config) {
        return new OrderedGatewayFilter((exchange, chain) -> {

            log.info("????????????????????????? DynamicUriGatewayFilterFactory config={}", config.toString());
            String dynamicUri = determineDynamicUri(exchange);

            // 동적으로 결정된 URI로 요청을 변경
            ServerWebExchange modifiedExchange = exchange.mutate()
                    .request(builder -> builder.uri(URI.create(dynamicUri)).path("/vscode/").build())
                    .build();
            log.info("????????????????????????? dynamic uri={} DynamicUriGatewayFilterFactory modifiedExchange={}", dynamicUri, modifiedExchange.getRequest().getPath());
            log.info("uri={} path={} host={} ", modifiedExchange.getRequest().getURI(),
                    modifiedExchange.getRequest().getPath(), modifiedExchange.getRequest().getHeaders().getHost());
            // 변경된 exchange로 필터 체인 계속
            return chain.filter(modifiedExchange);
        }, Ordered.LOWEST_PRECEDENCE);

    }


    private String determineDynamicUri(ServerWebExchange exchange) {
        String host = exchange.getRequest().getURI().getHost();
        String idName = ExchangeHandler.getFieldFromHost(host, 1);
        String servicePrefix = ExchangeHandler.getFieldFromHost(host, 3);
        String portNumber = ExchangeHandler.getFieldFromHost(host, 2);

        //return "http://" + servicePrefix + "-rde-service:" + portNumber;
        return "http://himang10-rde-service.part-rde:8443";
    }
}

